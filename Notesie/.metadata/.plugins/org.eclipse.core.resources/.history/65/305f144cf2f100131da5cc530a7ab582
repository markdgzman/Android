package com.example.notesie;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class NoteOperations {
	
	private DataBaseWrapper dbHelper;
	private String [] NOTE_TABLE_COLUMNS = {DataBaseWrapper.NOTE_ID, DataBaseWrapper.NOTE, DataBaseWrapper.TITLE};
	private SQLiteDatabase database;
	
	public NoteOperations(Context context) {
		dbHelper = new DataBaseWrapper(context);
	}
	
	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}
	
	public void close() {
		dbHelper.close();
	}
	
	public Note addNote(String note, String title){
		Note newNote = null;
		if(note.equals("")){
			return newNote;
		}
		else{
			ContentValues values = new ContentValues();
			
			values.put(DataBaseWrapper.NOTE, note);
			values.put(DataBaseWrapper.TITLE, title);
			
			long noteID = database.insert(DataBaseWrapper.NOTES, null, values);
			
			//return the create note
			Cursor cursor = database.query(DataBaseWrapper.NOTES, 
					NOTE_TABLE_COLUMNS, DataBaseWrapper.NOTE_ID + " = " + noteID, null, null, null, null);
		
			cursor.moveToFirst();
			
			newNote = parseNote(cursor);
			cursor.close();
			return newNote;
		}
	}
	
	
	
	public List getAllNotes(){
		List notes = new ArrayList();
		
		Cursor cursor = database.query(DataBaseWrapper.NOTES, 
				NOTE_TABLE_COLUMNS, null, null, null, null, null);
		
		cursor.moveToFirst();
		while(!cursor.isAfterLast()){
			Note note = parseNote(cursor);
			notes.add(note);
			cursor.moveToNext();
		}
		
		cursor.close();
		return notes;
	}
	
	public List getAllTitles(){
		List titles = new ArrayList();
		
		Cursor cursor = database.query(DataBaseWrapper.NOTES, 
				NOTE_TABLE_COLUMNS, null, null, null, null, null);	
	
		cursor.moveToFirst();
		
		while(!cursor.isAfterLast()){
			Note note = parseTitle(cursor);
			titles.add(note);
			cursor.moveToNext();
		}
		
		cursor.close();
		return titles;
	}
	
	public Cursor getNote(long rowId) throws SQLException {
		
		Cursor cursor = database.query(DataBaseWrapper.NOTES, 
				NOTE_TABLE_COLUMNS, null, null, null, null, null);	
		Cursor mCursor = database.query(true, DataBaseWrapper.NOTES, NOTE_TABLE_COLUMNS, 
				DataBaseWrapper.NOTE_ID + "=" + rowId, null, null, null, null, null)
		
		if(cursor != null){
			cursor.moveToFirst();
		}
		
		return mCursor;
		
	}
	
	private Note parseTitle(Cursor cursor){
		Note note = new Note();
		note.setId((cursor.getInt(0)));
		note.setTitle(cursor.getString(1));
		return note;
		
	}
	
	private Note parseNote(Cursor cursor){
		Note note = new Note();
		note.setId((cursor.getInt(0)));
		note.setNote(cursor.getString(1));
		note.setTitle(cursor.getString(2));
		return note;
	}

	
	
}
